{"version":3,"sources":["Components/ContactForm/ContactForm.module.css","Components/ContactList/ContactListItem/ContactListItem.module.css","Components/Filter/Filter.module.css","Components/ContactList/ContactList.module.css","App.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-selectors.js","Components/ContactForm/ContactForm.jsx","Components/ContactList/ContactListItem/ContactListItem.jsx","Components/ContactList/ContactList.jsx","Components/Filter/Filter.jsx","Components/Section/Section.jsx","App.js","index.js"],"names":["module","exports","addContact","createAction","payload","name","number","id","nanoid","deleteContact","changeFilter","items","createReducer","actions","state","filter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","getContacts","getFilterValue","INIT_STATE","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleChange","e","currentTarget","value","reset","preventSimilar","newContactName","normalizedName","toLowerCase","find","includes","className","s","form","onSubmit","data","preventDefault","alert","autoComplete","type","pattern","title","onChange","required","button","ContactListItem","onDelete","contactItem","onClick","ContactList","normalizedQuery","getFilteredList","onDeleteContact","map","Filter","label","eve","target","Section","children","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.bd9837b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__19qvh\",\"button\":\"ContactForm_button__1PR8D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"ContactListItem_contactItem__TJEY9\",\"button\":\"ContactListItem_button__3t3gh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1O2yl\",\"label\":\"Filter_label__3KLYE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__1kyoH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3Soqi\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport { nanoid } from 'nanoid';\r\n\r\nconst addContact = createAction('contacts/add', ({ name, number }) => {\r\n  return {\r\n    payload: {\r\n      name,\r\n      number,\r\n      id: nanoid(),\r\n    },\r\n  };\r\n});\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import { combineReducers, createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [payload, ...state],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { store, persistor };\r\n","export const getContacts = state => state.contacts.items;\r\n\r\nexport const getFilterValue = state => state.contacts.filter;\r\n\r\nexport const getFilteredList = state => {\r\n  const contacts = state.contacts.items;\r\n  const filter = state.contacts.filter;\r\n\r\n  const normalizedQuery = filter.toLowerCase();\r\n\r\n  return contacts.filter(({ name }) => name.toLowerCase().includes(normalizedQuery));\r\n};\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport s from 'Components/ContactForm/ContactForm.module.css';\r\nimport actions from 'redux/contacts/contacts-actions';\r\nimport { getContacts } from 'redux/contacts/contacts-selectors';\r\n\r\nconst INIT_STATE = {\r\n  NAME: '',\r\n  NUMBER: '',\r\n};\r\n\r\nconst ContactForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const onAddContact = data => dispatch(actions.addContact(data));\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    name === 'name' ? setName(value) : setNumber(value);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (preventSimilar(name)) {\r\n      alert(`${name} is already in contacts^^`);\r\n    } else {\r\n      onAddContact({ name, number });\r\n\r\n      reset();\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(INIT_STATE.NAME);\r\n    setNumber(INIT_STATE.NUMBER);\r\n  };\r\n\r\n  const preventSimilar = newContactName => {\r\n    const normalizedName = newContactName.toLowerCase();\r\n\r\n    return contacts.find(({ name }) => name.toLowerCase().includes(normalizedName));\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit} autoComplete=\"off\">\r\n      <h3>Did you already find a new friend?^^</h3>\r\n      <label>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n      </label>\r\n      <label>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n          value={number}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n      </label>\r\n      <button className={s.button} type=\"submit\">\r\n        Add Contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\nimport s from 'Components/ContactList/ContactListItem/ContactListItem.module.css';\r\n\r\nconst ContactListItem = ({ name, number, id, onDelete }) => {\r\n  return (\r\n    <li className={s.contactItem}>\r\n      {name}: {number}\r\n      <button className={s.button} type=\"button\" onClick={() => onDelete(id)}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport ContactListItem from 'Components/ContactList/ContactListItem/ContactListItem';\r\nimport s from 'Components/ContactList/ContactList.module.css';\r\nimport actions from 'redux/contacts/contacts-actions';\r\nimport { getFilteredList } from 'redux/contacts/contacts-selectors';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(state => getFilteredList(state));\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeleteContact = id => dispatch(actions.deleteContact(id));\r\n\r\n  return (\r\n    <ul className={s.contacts}>\r\n      {contacts.map(({ name, number, id }) => (\r\n        <ContactListItem\r\n          name={name}\r\n          number={number}\r\n          id={id}\r\n          onDelete={onDeleteContact}\r\n          key={id}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport s from 'Components/Filter/Filter.module.css';\r\nimport actions from 'redux/contacts/contacts-actions';\r\nimport { getFilterValue } from 'redux/contacts/contacts-selectors';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilterValue);\r\n  const dispatch = useDispatch();\r\n\r\n  const onChangeFilter = eve => dispatch(actions.changeFilter(eve.target.value));\r\n\r\n  return (\r\n    <label className={s.label}>\r\n      Find contacts by name\r\n      <input\r\n        className={s.filter}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChangeFilter}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import ContactForm from 'Components/ContactForm/ContactForm';\r\nimport ContactList from 'Components/ContactList/ContactList';\r\nimport Filter from 'Components/Filter/Filter';\r\nimport Section from 'Components/Section/Section';\r\nimport s from './App.module.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className={s.App}>\r\n      <Section title=\"Phonebook\">\r\n        <ContactForm />\r\n      </Section>\r\n      <Section title=\"Contacts\">\r\n        <Filter />\r\n        <ContactList />\r\n      </Section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport store from './redux/store';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={null} persistor={store.persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}